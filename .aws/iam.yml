Resources:
  ServerlessAuthorizerLambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: ServerlessAuthorizerLambdaExecutionPolicy
      Description: Policy created by serverless framework.
      Path: "/"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/*
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:DescribeSecret
          Resource:
          - Fn::Sub: arn:aws:secretsmanager:us-east-1:${AWS::AccountId}:secret:/*
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          Resource: "*"
        - Effect: Allow
          Action:
          - cognito-identity:GetOpenIdToken
          - cognito-identity:GetCredentialsForIdentity
          - cognito-identity:GetId
          - cognito-identity:DescribeIdentity
          - cognito-identity:ListIdentityPools
          Resource: "*"
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
          - Fn::Sub: arn:aws:lambda:us-east-1:${AWS::AccountId}:function:*
  ServerlessAuthorizerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServerlessAuthorizerLambdaExecutionPolicy
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: ServerlessAuthorizerLambdaExecutionPolicy